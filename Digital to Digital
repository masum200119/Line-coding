import numpy as np
from matplotlib import pyplot as plt

# UNIPOLER.................................
# data = np.random.randint(0,2,25)
# data = np.array([0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0])
data = [int(x) for x in input().split()]
time = np.arange(len(data))

plt.step(time, data, where='post')
plt.title('Unipolar')
plt.xlabel('Time')
plt.ylabel('Ammplitude')

# plt.subplot(2, 1, 1)
plt.text(0, 2, data)

plt.grid(True)
plt.yticks([-2, -1, 0, 1, 2, 3])
plt.xticks(time)

# plt.plot(time, data)
plt.show()

# NRZ-L.......................................
# data = np.random.randint(0,2,10)
# time = np.arange(len(data))
signal = np.zeros(len(data), dtype=int)
for i in range(len(data)):
    if data[i] == 0:
        signal[i] = -1
    else:
        signal[i] = 1

plt.step(time, signal, where='post')
plt.title('NRZ-L')
plt.ylabel('Amplitude')
plt.xlabel('Time')
# plt.subplot(2, 1, 2)
plt.text(0, 2, data)

# plt.text(3, 8)
plt.grid(True)
plt.yticks([-2, -1, 0, 1, 2, 3])
plt.xticks(time)

# plt.plot(time, data)
plt.show()

# NRZ-I.......................................
# data = np.random.randint(0,2,10)
# time = np.arange(len(data))
signal = np.zeros(len(data), dtype=int)
flg = True
for i in range(len(data)):
    if data[i] == 1:
        flg = not flg
    if flg:
        signal[i] = 1
    else:
        signal[i] = -1

plt.step(time, signal, where='post')
plt.title('NRZ-I')
plt.xlabel('Amplitude')
plt.ylabel('Time')
plt.text(0, 2, data)

# plt.text(3, 8)
plt.grid(True)
plt.yticks([-2, -1, 0, 1, 2, 3])
plt.xticks(time)
plt.show()

# RZ...........................................
data = np.random.randint(0, 2, 10)
time = np.linspace(0, len(data), len(data) * 2)
signal = np.zeros(2 * len(data), dtype=int)

for i in range(0, 2 * len(data), 2):
    if data[i // 2] == 1:
        signal[i] = 1
    else:
        signal[i] = -1
    signal[i + 1] = 0

plt.step(time, signal, where='post')
plt.title('RZ')
plt.xlabel('Amplitude')
plt.ylabel('Time')
plt.text(0, 2, data)

# plt.text(3, 8)
plt.grid(True)
plt.yticks([-2, -1, 0, 1, 2, 3])
plt.xticks(np.arange(len(data)))
plt.show()

# MANCHESTER.........................................
data = np.random.randint(0, 2, 10)
time_org = np.arange(len(data))
signal = np.zeros(len(data) * 2, dtype=int)

for i in range(0, len(data) * 2, 2):
    if data[i // 2] == 0:
        signal[i] = 1
        signal[i + 1] = -1
    else:
        signal[i] = -1
        signal[i + 1] = 1

print(signal)
time = np.arange(len(signal))
plt.step(time, signal, where='post')
plt.title('Manchestor')
plt.xlabel('Amplitude')
plt.ylabel('Time')
plt.text(0, 2, data)

plt.grid(True)
plt.yticks([-2, -1, 0, 1, 2, 3])
plt.xticks(time_org * 2, time_org)
plt.show()

# DIFFERENTIAL MANCHESTER...............................
data = np.random.randint(0, 2, 10)
time_org = np.arange(len(data))
signal = np.zeros(len(data) * 2, dtype=int)

start = False
for i in range(0, len(data) * 2, 2):
    if start:
        if data[i // 2] == 0:
            signal[i] = -1 * signal[i - 1]
            signal[i + 1] = signal[i - 1]
        else:
            signal[i] = signal[i - 1]
            signal[i + 1] = -1 * signal[i - 1]
    else:
        start = True
        if data[i // 2] == 0:
            signal[i] = -1
            signal[i + 1] = 1
        else:
            signal[i] = 1
            signal[i + 1] = -1

print(signal)
time = np.arange(len(signal))
plt.step(time, signal, where='post')
plt.title('Differential Manchestor')
plt.xlabel('Amplitude')
plt.ylabel('Time')
plt.text(0, 2, data)

plt.grid(True)
plt.yticks([-2, -1, 0, 1, 2, 3])
plt.xticks(time_org * 2, time_org)
plt.show()

# ALTERNATE MARK INVERSION...........................

data = np.random.randint(0, 2, 15)
time = np.arange(len(data))
signal = np.zeros(len(data), dtype=int)
flg = False
for i in range(0, len(data)):
    if data[i] == 1:
        if flg:
            signal[i] = -1
        else:
            signal[i] = 1
        flg = not flg
    else:
        signal[i] = 0

plt.step(time, signal, where='post')
plt.title('AMI')
plt.xlabel('Amplitude')
plt.ylabel('Time')
plt.text(0, 2, data)

# plt.text(3, 8)
plt.grid(True)
plt.yticks([-2, -1, 0, 1, 2, 3])
plt.xticks(np.arange(len(data)))
plt.show()


